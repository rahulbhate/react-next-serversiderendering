{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie'; // set up cookies\n\nvar cookies = new Cookies();\nvar serverUrl = 'http://localhost:8080';\nexport function handleAuthSSR(_x) {\n  return _handleAuthSSR.apply(this, arguments);\n}\n\nfunction _handleAuthSSR() {\n  _handleAuthSSR = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(ctx) {\n    var token, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            token = null; // if context has request info aka Server Side\n\n            if (ctx.req) {\n              // ugly way to get cookie value from a string of values\n              // good enough for demostration\n              token = ctx.req.headers.cookie.replace(/(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\n            } else {\n              // we dont have request info aka Client Side\n              token = cookies.get('token');\n            }\n\n            _context.prev = 2;\n            _context.next = 5;\n            return axios.get(serverUrl + '/speakers', {\n              headers: {\n                Authorization: token\n              }\n            });\n\n          case 5:\n            response = _context.sent;\n            // dont really care about response, as long as it not an error\n            console.log('token ping:', response.data.msg);\n            _context.next = 14;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            // in case of error\n            console.log(_context.t0.response.data.msg);\n            console.log('redirecting back to main page'); // redirect to login\n\n            if (ctx.res) {\n              ctx.res.writeHead(302, {\n                Location: '/'\n              });\n              ctx.res.end();\n            } else {\n              Router.push('/login');\n            }\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n  return _handleAuthSSR.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/rahulbhate/projects/react-next-serversiderendering/utils/auth.js"],"names":["axios","Router","Cookies","cookies","serverUrl","handleAuthSSR","ctx","token","req","headers","cookie","replace","get","Authorization","response","console","log","data","msg","res","writeHead","Location","end","push"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,cAAxB,C,CACA;;AACA,IAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AACA,IAAME,SAAS,GAAG,uBAAlB;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;;;;;2BAAO,iBAA6BC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,YAAAA,KADC,GACO,IADP,EAGL;;AACA,gBAAID,GAAG,CAACE,GAAR,EAAa;AACX;AACA;AACAD,cAAAA,KAAK,GAAGD,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CACN,8CADM,EAEN,IAFM,CAAR;AAID,aAPD,MAOO;AACL;AACAJ,cAAAA,KAAK,GAAGJ,OAAO,CAACS,GAAR,CAAY,OAAZ,CAAR;AACD;;AAdI;AAAA;AAAA,mBAiBoBZ,KAAK,CAACY,GAAN,CAAUR,SAAS,GAAG,WAAtB,EAAmC;AACxDK,cAAAA,OAAO,EAAE;AAAEI,gBAAAA,aAAa,EAAEN;AAAjB;AAD+C,aAAnC,CAjBpB;;AAAA;AAiBGO,YAAAA,QAjBH;AAoBH;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,QAAQ,CAACG,IAAT,CAAcC,GAAzC;AArBG;AAAA;;AAAA;AAAA;AAAA;AAuBH;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAIF,QAAJ,CAAaG,IAAb,CAAkBC,GAA9B;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAzBG,CA0BH;;AACA,gBAAIV,GAAG,CAACa,GAAR,EAAa;AACXb,cAAAA,GAAG,CAACa,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AACrBC,gBAAAA,QAAQ,EAAE;AADW,eAAvB;AAGAf,cAAAA,GAAG,CAACa,GAAJ,CAAQG,GAAR;AACD,aALD,MAKO;AACLrB,cAAAA,MAAM,CAACsB,IAAP,CAAY,QAAZ;AACD;;AAlCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from 'axios';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\n// set up cookies\nconst cookies = new Cookies();\nconst serverUrl = 'http://localhost:8080';\n\nexport async function handleAuthSSR(ctx) {\n  let token = null;\n\n  // if context has request info aka Server Side\n  if (ctx.req) {\n    // ugly way to get cookie value from a string of values\n    // good enough for demostration\n    token = ctx.req.headers.cookie.replace(\n      /(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n      '$1',\n    );\n  } else {\n    // we dont have request info aka Client Side\n    token = cookies.get('token');\n  }\n\n  try {\n    const response = await axios.get(serverUrl + '/speakers', {\n      headers: { Authorization: token },\n    });\n    // dont really care about response, as long as it not an error\n    console.log('token ping:', response.data.msg);\n  } catch (err) {\n    // in case of error\n    console.log(err.response.data.msg);\n    console.log('redirecting back to main page');\n    // redirect to login\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/',\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/login');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}