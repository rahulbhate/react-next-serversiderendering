{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\rbhate\\\\projects\\\\react-next-serversiderendering\\\\pages\\\\secret.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Cookies } from 'react-cookie';\nimport Auth from '../utils/auth';\nimport { Router } from 'next/router';\nimport { longStackSupport } from 'q';\nvar serverUrl = 'http://localhost:8080'; // set up cookies\n//const cookies = new Cookies();\n\nfunction Secret() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAuthenticated = _useState2[0],\n      setAuthenticated = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clientToken = _useState4[0],\n      setToken = _useState4[1];\n\n  useEffect(function () {\n    var token = cookies.get('token');\n    console.log(token);\n\n    if (token) {\n      setAuthenticated(true);\n      setToken(token);\n      console.log(clientToken);\n    } else {\n      setAuthenticated(false); //Router.push('/login');\n    }\n\n    console.log('useEffect hook called');\n  });\n\n  var logout =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.post(serverUrl + '/logout', {}).then(function (res) {\n                console.log(res); //cookies.remove(token);\n\n                setToken('');\n                localStorage.removeItem('rememberMe');\n                console.log('token has been removed');\n              }).then(function (error) {\n                console.log(error);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function logout() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return isAuthenticated ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, ' ', React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"This is secret page\"), React.createElement(\"button\", {\n    onClick: logout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Logout\")) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"You are not authorized user\"));\n}\n\nexport default Auth(Secret);\n/*class Secret extends React.Component {\r\n  onPingCall = async (e) => {\r\n    const token = cookies.get('token');\r\n    console.log(token);\r\n\r\n    await axios\r\n      .post(serverUrl + '/logout', {})\r\n      .then((res) => {\r\n        console.log(res);\r\n        cookies.remove(token);\r\n        console.log('token has been removed');\r\n        Router.push('/login');\r\n      })\r\n      .then((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Secret page</h2>\r\n        <p>Only accessible via a valid JWT</p>\r\n        <br />\r\n        <button onClick={(e) => this.onPingCall(e)}>Logout</button>\r\n        <p>Check console for response</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Server-Side Rendering\r\nSecret.getInitialProps = async (ctx) => {\r\n  // Must validate JWT\r\n  // If the JWT is invalid it must redirect\r\n  // back to the main page. You can do that\r\n  // with Router from 'next/router\r\n  await Auth(ctx);\r\n\r\n  // Must return an object\r\n  return {};\r\n};\r\n\r\nexport default Auth(Secret);*/","map":{"version":3,"sources":["C:\\Users\\rbhate\\projects\\react-next-serversiderendering\\pages\\secret.js"],"names":["React","useState","useEffect","axios","Cookies","Auth","Router","longStackSupport","serverUrl","Secret","isAuthenticated","setAuthenticated","clientToken","setToken","token","cookies","get","console","log","logout","post","then","res","localStorage","removeItem","error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,gBAAT,QAAiC,GAAjC;AAEA,IAAMC,SAAS,GAAG,uBAAlB,C,CAEA;AACA;;AACA,SAASC,MAAT,GAAkB;AAAA,kBAC4BR,QAAQ,EADpC;AAAA;AAAA,MACTS,eADS;AAAA,MACQC,gBADR;;AAAA,mBAEgBV,QAAQ,EAFxB;AAAA;AAAA,MAETW,WAFS;AAAA,MAEIC,QAFJ;;AAGhBX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMY,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;AACA,QAAIA,KAAJ,EAAW;AACTH,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,MAAAA,QAAQ,CAACC,KAAD,CAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACD,KAJD,MAIO;AACLD,MAAAA,gBAAgB,CAAC,KAAD,CAAhB,CADK,CAEL;AACD;;AACDM,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,GAZQ,CAAT;;AAaA,MAAMC,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIPhB,KAAK,CACRiB,IADG,CACEZ,SAAS,GAAG,SADd,EACyB,EADzB,EAEHa,IAFG,CAEE,UAACC,GAAD,EAAS;AACbL,gBAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ,EADa,CAEb;;AACAT,gBAAAA,QAAQ,CAAC,EAAD,CAAR;AACAU,gBAAAA,YAAY,CAACC,UAAb,CAAwB,YAAxB;AACAP,gBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,eARG,EASHG,IATG,CASE,UAACI,KAAD,EAAW;AACfR,gBAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD,eAXG,CAJO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAANN,MAAM;AAAA;AAAA;AAAA,KAAZ;;AAiBA,SAAOT,eAAe,GACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAGE;AAAQ,IAAA,OAAO,EAAES,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CADoB,GAOpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,CAPF;AAWD;;AACD,eAAed,IAAI,CAACI,MAAD,CAAnB;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Cookies } from 'react-cookie';\r\nimport Auth from '../utils/auth';\r\nimport { Router } from 'next/router';\r\nimport { longStackSupport } from 'q';\r\n\r\nconst serverUrl = 'http://localhost:8080';\r\n\r\n// set up cookies\r\n//const cookies = new Cookies();\r\nfunction Secret() {\r\n  const [isAuthenticated, setAuthenticated] = useState();\r\n  const [clientToken, setToken] = useState();\r\n  useEffect(() => {\r\n    const token = cookies.get('token');\r\n    console.log(token);\r\n    if (token) {\r\n      setAuthenticated(true);\r\n      setToken(token);\r\n      console.log(clientToken);\r\n    } else {\r\n      setAuthenticated(false);\r\n      //Router.push('/login');\r\n    }\r\n    console.log('useEffect hook called');\r\n  });\r\n  const logout = async () => {\r\n    //const token = cookies.get('token');\r\n    //console.log(token);\r\n\r\n    await axios\r\n      .post(serverUrl + '/logout', {})\r\n      .then((res) => {\r\n        console.log(res);\r\n        //cookies.remove(token);\r\n        setToken('');\r\n        localStorage.removeItem('rememberMe');\r\n        console.log('token has been removed');\r\n      })\r\n      .then((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  return isAuthenticated ? (\r\n    <div>\r\n      {' '}\r\n      <h3>This is secret page</h3>\r\n      <button onClick={logout}>Logout</button>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <h3>You are not authorized user</h3>\r\n    </div>\r\n  );\r\n}\r\nexport default Auth(Secret);\r\n/*class Secret extends React.Component {\r\n  onPingCall = async (e) => {\r\n    const token = cookies.get('token');\r\n    console.log(token);\r\n\r\n    await axios\r\n      .post(serverUrl + '/logout', {})\r\n      .then((res) => {\r\n        console.log(res);\r\n        cookies.remove(token);\r\n        console.log('token has been removed');\r\n        Router.push('/login');\r\n      })\r\n      .then((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Secret page</h2>\r\n        <p>Only accessible via a valid JWT</p>\r\n        <br />\r\n        <button onClick={(e) => this.onPingCall(e)}>Logout</button>\r\n        <p>Check console for response</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Server-Side Rendering\r\nSecret.getInitialProps = async (ctx) => {\r\n  // Must validate JWT\r\n  // If the JWT is invalid it must redirect\r\n  // back to the main page. You can do that\r\n  // with Router from 'next/router\r\n  await Auth(ctx);\r\n\r\n  // Must return an object\r\n  return {};\r\n};\r\n\r\nexport default Auth(Secret);*/\r\n"]},"metadata":{},"sourceType":"module"}