{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\rbhate\\\\projects\\\\react-next-serversiderendering\\\\src\\\\components\\\\List\\\\List.js\";\nimport React, { useState } from 'react';\nimport useInfiniteScroll from \"./useInfiniteScroll\";\n\nvar List = function List() {\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      start = _useState2[0],\n      setStart = _useState2[1];\n\n  var _useState3 = useState(5),\n      _useState4 = _slicedToArray(_useState3, 2),\n      limit = _useState4[0],\n      setLimit = _useState4[1];\n\n  var _useState5 = useState(_Array$from(Array(30).keys(), function (n) {\n    return n + 1;\n  })),\n      _useState6 = _slicedToArray(_useState5, 2),\n      listItems = _useState6[0],\n      setListItems = _useState6[1];\n\n  var _useInfiniteScroll = useInfiniteScroll(fetchMoreListItems),\n      _useInfiniteScroll2 = _slicedToArray(_useInfiniteScroll, 2),\n      isFetching = _useInfiniteScroll2[0],\n      setIsFetching = _useInfiniteScroll2[1];\n\n  function fetchMoreListItems() {\n    setTimeout(function () {\n      setListItems(function (prevState) {\n        return [].concat(_toConsumableArray(prevState), _toConsumableArray(_Array$from(Array(20).keys(), function (n) {\n          return n + prevState.length + 1;\n        })));\n      });\n      setIsFetching(false);\n    }, 2000);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n    className: \"list-group mb-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, listItems.map(function (listItem) {\n    return React.createElement(\"li\", {\n      className: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"List Item \", listItem);\n  })), isFetching && 'Fetching more list items...');\n};\n\nexport default List;","map":{"version":3,"sources":["C:\\Users\\rbhate\\projects\\react-next-serversiderendering\\src\\components\\List\\List.js"],"names":["React","useState","useInfiniteScroll","List","start","setStart","limit","setLimit","Array","keys","n","listItems","setListItems","fetchMoreListItems","isFetching","setIsFetching","setTimeout","prevState","length","map","listItem"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBACQF,QAAQ,CAAC,CAAD,CADhB;AAAA;AAAA,MACXG,KADW;AAAA,MACJC,QADI;;AAAA,mBAEQJ,QAAQ,CAAC,CAAD,CAFhB;AAAA;AAAA,MAEXK,KAFW;AAAA,MAEJC,QAFI;;AAAA,mBAGiBN,QAAQ,CAAC,YAAWO,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,EAAX,EAA6B,UAAAC,CAAC;AAAA,WAAIA,CAAC,GAAG,CAAR;AAAA,GAA9B,CAAD,CAHzB;AAAA;AAAA,MAGVC,SAHU;AAAA,MAGCC,YAHD;;AAAA,2BAImBV,iBAAiB,CAACW,kBAAD,CAJpC;AAAA;AAAA,MAIVC,UAJU;AAAA,MAIEC,aAJF;;AAMjB,WAASF,kBAAT,GAA8B;AAC5BG,IAAAA,UAAU,CAAC,YAAM;AACfJ,MAAAA,YAAY,CAAC,UAAAK,SAAS;AAAA,4CAASA,SAAT,sBAAuB,YAAWT,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,EAAX,EAA6B,UAAAC,CAAC;AAAA,iBAAIA,CAAC,GAAGO,SAAS,CAACC,MAAd,GAAuB,CAA3B;AAAA,SAA9B,CAAvB;AAAA,OAAV,CAAZ;AACAH,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAHS,EAGP,IAHO,CAAV;AAID;;AAED,SACE,0CACE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,SAAS,CAACQ,GAAV,CAAc,UAAAC,QAAQ;AAAA,WAAI;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA2CA,QAA3C,CAAJ;AAAA,GAAtB,CADH,CADF,EAIGN,UAAU,IAAI,6BAJjB,CADF;AAQD,CArBD;;AAuBA,eAAeX,IAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport useInfiniteScroll from \"./useInfiniteScroll\";\r\n\r\nconst List = () => {\r\n const [start, setStart] = useState(1);\r\n const [limit, setLimit] = useState(5)\r\n  const [listItems, setListItems] = useState(Array.from(Array(30).keys(), n => n + 1));\r\n  const [isFetching, setIsFetching] = useInfiniteScroll(fetchMoreListItems);\r\n\r\n  function fetchMoreListItems() {\r\n    setTimeout(() => {\r\n      setListItems(prevState => ([...prevState, ...Array.from(Array(20).keys(), n => n + prevState.length + 1)]));\r\n      setIsFetching(false);\r\n    }, 2000);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"list-group mb-2\">\r\n        {listItems.map(listItem => <li className=\"list-group-item\">List Item {listItem}</li>)}\r\n      </ul>\r\n      {isFetching && 'Fetching more list items...'}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;"]},"metadata":{},"sourceType":"module"}