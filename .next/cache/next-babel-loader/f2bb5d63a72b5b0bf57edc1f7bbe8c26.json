{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\rbhate\\\\projects\\\\react-next-serversiderendering\\\\pages\\\\sessions.js\";\n// This is the Link API\nimport React from 'react';\nimport 'isomorphic-unfetch';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useState, useEffect } from 'react';\n\nfunction Index(_ref) {\n  var speaker = _ref.speaker;\n\n  var _useState = useState({\n    speaker: speaker\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      speakersData = _useState2[0],\n      setSpeakersData = _useState2[1];\n\n  useEffect(function () {\n    console.log('UseEffect LifeCycle Method on Client Side get Called once Server Side Rendering Done');\n  }, []);\n  return React.createElement(React.Fragment, null, console.log(speakersData.speaker.sessions), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, speakersData.speaker.sessions.map(function (session, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, session.title);\n  })));\n}\n\nIndex.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var respon, jj;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('http://localhost:8080/sessions');\n\n        case 2:\n          respon = _context.sent;\n          _context.next = 5;\n          return respon.json();\n\n        case 5:\n          jj = _context.sent;\n          return _context.abrupt(\"return\", {\n            speaker: jj\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;","map":{"version":3,"sources":["C:\\Users\\rbhate\\projects\\react-next-serversiderendering\\pages\\sessions.js"],"names":["React","useState","useEffect","Index","speaker","speakersData","setSpeakersData","console","log","sessions","map","session","index","title","getInitialProps","fetch","respon","json","jj"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,oBAAP;AACA,OAAO,sCAAP;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,KAAT,OAA4B;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAAA,kBACcH,QAAQ,CAAC;AAAEG,IAAAA,OAAO,EAAPA;AAAF,GAAD,CADtB;AAAA;AAAA,MACnBC,YADmB;AAAA,MACLC,eADK;;AAG1BJ,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,OAAO,CAACC,GAAR,CACE,sFADF;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SACE,0CACGD,OAAO,CAACC,GAAR,CAAYH,YAAY,CAACD,OAAb,CAAqBK,QAAjC,CADH,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,YAAY,CAACD,OAAb,CAAqBK,QAArB,CAA8BC,GAA9B,CAAkC,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACrD,WAAO;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBD,OAAO,CAACE,KAAzB,CAAP;AACD,GAFA,CADH,CAHF,CADF;AAWD;;AAEDV,KAAK,CAACW,eAAN;AAAA;AAAA;AAAA;AAAA,yBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDC,KAAK,CAAC,gCAAD,CADJ;;AAAA;AAChBC,UAAAA,MADgB;AAAA;AAAA,iBAGLA,MAAM,CAACC,IAAP,EAHK;;AAAA;AAGhBC,UAAAA,EAHgB;AAAA,2CAKf;AAAEd,YAAAA,OAAO,EAAEc;AAAX,WALe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAQA,eAAef,KAAf","sourcesContent":["// This is the Link API\r\nimport React from 'react';\r\n\r\nimport 'isomorphic-unfetch';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction Index({ speaker }) {\r\n  const [speakersData, setSpeakersData] = useState({ speaker });\r\n\r\n  useEffect(() => {\r\n    console.log(\r\n      'UseEffect LifeCycle Method on Client Side get Called once Server Side Rendering Done',\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {console.log(speakersData.speaker.sessions)}\r\n\r\n      <ul>\r\n        {speakersData.speaker.sessions.map((session, index) => {\r\n          return <li key={index}>{session.title}</li>;\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nIndex.getInitialProps = async () => {\r\n  const respon = await fetch('http://localhost:8080/sessions');\r\n\r\n  const jj = await respon.json();\r\n\r\n  return { speaker: jj };\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}