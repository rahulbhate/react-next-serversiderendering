{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport decode from 'jwt-decode';\nimport axios from 'axios';\nimport Router from 'next/router';\n\nvar AuthHelperMethods = // Initializing important variables\nfunction AuthHelperMethods(domain) {//THIS LINE IS ONLY USED WHEN YOU'RE IN PRODUCTION MODE!\n  // this.domain = domain || 'http://localhost:3000'; // API server domain\n\n  var _this = this;\n\n  _classCallCheck(this, AuthHelperMethods);\n\n  _defineProperty(this, \"login\", function (inputValues) {\n    // Get a token from api server using the fetch api\n    axios.post(\"http://localhost:8000/login\", inputValues).then(function (res) {\n      console.log(res.data.token);\n      var token = res.data.token;\n      localStorage.setItem('rememberMe', token); //setToken(token);\n\n      console.log(token);\n      Router.push('/secret');\n    });\n  });\n\n  _defineProperty(this, \"loggedIn\", function () {\n    // Checks if there is a saved token and it's still valid\n    var token = _this.getToken(); // Getting token from localstorage\n\n\n    console.log(token);\n    return !!token && !_this.isTokenExpired(token); // handwaiving here\n  });\n\n  _defineProperty(this, \"isTokenExpired\", function (token) {\n    try {\n      var decoded = decode(token);\n\n      if (decoded.exp < _Date$now() / 1000) {\n        // Checking if token is expired.\n        console.log('isToken Expired function called');\n        return true;\n      } else return false;\n    } catch (err) {\n      console.log('expired check failed! Line 42: AuthService.js');\n      return false;\n    }\n  });\n\n  _defineProperty(this, \"setToken\", function (idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('rememberMe', idToken);\n  });\n\n  _defineProperty(this, \"getToken\", function () {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('rememberMe');\n  });\n\n  _defineProperty(this, \"logout\", function () {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n  });\n\n  _defineProperty(this, \"getConfirm\", function () {\n    // Using jwt-decode npm package to decode the token\n    var answer = decode(_this.getToken());\n    console.log('Recieved answer!');\n    return answer;\n  });\n\n  _defineProperty(this, \"fetch\", function (url, options) {\n    // performs api calls sending the required authentication headers\n    var headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }; // Setting Authorization header\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n    if (_this.loggedIn()) {\n      headers['Authorization'] = 'Bearer ' + _this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers: headers\n    }, options)).then(_this._checkStatus).then(function (response) {\n      return response.data.json();\n    }).then(error);\n  });\n\n  _defineProperty(this, \"_checkStatus\", function (response) {\n    // raises an error in case response status is not a success\n    if (response.status == 200) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  });\n};\n\nexport { AuthHelperMethods as default };","map":{"version":3,"sources":["C:\\Users\\rbhate\\projects\\react-next-serversiderendering\\utils\\AuthHelperMethods.js"],"names":["decode","axios","Router","AuthHelperMethods","domain","inputValues","post","then","res","console","log","data","token","localStorage","setItem","push","getToken","isTokenExpired","decoded","exp","err","idToken","getItem","removeItem","answer","url","options","headers","Accept","loggedIn","fetch","_checkStatus","response","json","error","status","Error","statusText"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport Router from 'next/router';\r\n\r\nexport default class AuthHelperMethods {\r\n  // Initializing important variables\r\n  constructor(domain) {\r\n    //THIS LINE IS ONLY USED WHEN YOU'RE IN PRODUCTION MODE!\r\n    // this.domain = domain || 'http://localhost:3000'; // API server domain\r\n  }\r\n  login = (inputValues) => {\r\n    // Get a token from api server using the fetch api\r\n    axios.post(`http://localhost:8000/login`, inputValues).then((res) => {\r\n      console.log(res.data.token);\r\n      const token = res.data.token;\r\n      localStorage.setItem('rememberMe', token);\r\n      //setToken(token);\r\n      console.log(token);\r\n      Router.push('/secret');\r\n    });\r\n  };\r\n\r\n  loggedIn = () => {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken(); // Getting token from localstorage\r\n    console.log(token);\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  };\r\n\r\n  isTokenExpired = (token) => {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        // Checking if token is expired.\r\n        console.log('isToken Expired function called');\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      console.log('expired check failed! Line 42: AuthService.js');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  setToken = (idToken) => {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('rememberMe', idToken);\r\n  };\r\n\r\n  getToken = () => {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('rememberMe');\r\n  };\r\n\r\n  logout = () => {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n  };\r\n\r\n  getConfirm = () => {\r\n    // Using jwt-decode npm package to decode the token\r\n    let answer = decode(this.getToken());\r\n    console.log('Recieved answer!');\r\n    return answer;\r\n  };\r\n\r\n  fetch = (url, options) => {\r\n    // performs api calls sending the required authentication headers\r\n    const headers = {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    };\r\n    // Setting Authorization header\r\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\r\n    if (this.loggedIn()) {\r\n      headers['Authorization'] = 'Bearer ' + this.getToken();\r\n    }\r\n\r\n    return fetch(url, {\r\n      headers,\r\n      ...options,\r\n    })\r\n      .then(this._checkStatus)\r\n      .then((response) => response.data.json())\r\n      .then(error);\r\n  };\r\n\r\n  _checkStatus = (response) => {\r\n    // raises an error in case response status is not a success\r\n    if (response.status == 200) {\r\n      // Success status lies between 200 to 300\r\n      return response;\r\n    } else {\r\n      var error = new Error(response.statusText);\r\n      error.response = response;\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}