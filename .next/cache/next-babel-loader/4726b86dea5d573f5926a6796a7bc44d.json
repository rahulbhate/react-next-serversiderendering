{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport decode from 'jwt-decode';\nimport Router from 'next/router';\n\nvar AuthHelperMethods = // Initializing important variables\nfunction AuthHelperMethods(domain) {//THIS LINE IS ONLY USED WHEN YOU'RE IN PRODUCTION MODE!\n  // this.domain = domain || 'http://localhost:3000'; // API server domain\n\n  var _this = this;\n\n  _classCallCheck(this, AuthHelperMethods);\n\n  _defineProperty(this, \"login\", function (inputValues) {\n    var options = {\n      method: 'POST',\n      body: _JSON$stringify(inputValues),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    fetch('http://localhost:8000/login', options).then(function (res) {\n      if (res.ok) {\n        return _Promise.resolve(res.json());\n      } else {\n        return _Promise.reject({\n          status: res.status,\n          statusText: res.statusText\n        });\n      }\n    }).then(function (res) {\n      console.log(res);\n\n      _this.setToken(res.token);\n\n      Router.push('/secret');\n    })[\"catch\"](function (err) {\n      return console.log('Error, with message:', err.statusText);\n    });\n  });\n\n  _defineProperty(this, \"loggedIn\", function () {\n    // Checks if there is a saved token and it's still valid\n    var token = _this.getToken(); // Getting token from localstorage\n\n\n    console.log(token);\n    return !!token && !_this.isTokenExpired(token); // handwaiving here\n  });\n\n  _defineProperty(this, \"isTokenExpired\", function (token) {\n    try {\n      var decoded = decode(token);\n\n      if (decoded.exp < _Date$now() / 1000) {\n        // Checking if token is expired.\n        console.log('isToken Expired function called');\n        return true;\n      } else return false;\n    } catch (err) {\n      console.log('expired check failed! Line 42: AuthService.js');\n      return false;\n    }\n  });\n\n  _defineProperty(this, \"setToken\", function (idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('rememberMe', idToken);\n  });\n\n  _defineProperty(this, \"getToken\", function () {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('rememberMe');\n  });\n\n  _defineProperty(this, \"logout\", function () {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n  });\n\n  _defineProperty(this, \"getConfirm\", function () {\n    // Using jwt-decode npm package to decode the token\n    var answer = decode(_this.getToken());\n    console.log('Recieved answer!');\n    return answer;\n  });\n\n  _defineProperty(this, \"_checkStatus\", function (response) {\n    // raises an error in case response status is not a success\n    if (response.status == 200) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  });\n};\n\nexport { AuthHelperMethods as default };","map":{"version":3,"sources":["C:\\Users\\rbhate\\projects\\react-next-serversiderendering\\utils\\AuthHelperMethods.js"],"names":["decode","Router","AuthHelperMethods","domain","inputValues","options","method","body","headers","fetch","then","res","ok","resolve","json","reject","status","statusText","console","log","setToken","token","push","err","getToken","isTokenExpired","decoded","exp","idToken","localStorage","setItem","getItem","removeItem","answer","response","error","Error"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode';\r\nimport Router from 'next/router';\r\n\r\nexport default class AuthHelperMethods {\r\n  // Initializing important variables\r\n  constructor(domain) {\r\n    //THIS LINE IS ONLY USED WHEN YOU'RE IN PRODUCTION MODE!\r\n    // this.domain = domain || 'http://localhost:3000'; // API server domain\r\n  }\r\n  login = (inputValues) => {\r\n    const options = {\r\n      method: 'POST',\r\n      body: JSON.stringify(inputValues),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    fetch('http://localhost:8000/login', options)\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return Promise.resolve(res.json());\r\n        } else {\r\n          return Promise.reject({\r\n            status: res.status,\r\n            statusText: res.statusText,\r\n          });\r\n        }\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setToken(res.token);\r\n        Router.push('/secret');\r\n      })\r\n      .catch((err) => console.log('Error, with message:', err.statusText));\r\n  };\r\n\r\n  loggedIn = () => {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken(); // Getting token from localstorage\r\n    console.log(token);\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  };\r\n\r\n  isTokenExpired = (token) => {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        // Checking if token is expired.\r\n        console.log('isToken Expired function called');\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      console.log('expired check failed! Line 42: AuthService.js');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  setToken = (idToken) => {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('rememberMe', idToken);\r\n  };\r\n\r\n  getToken = () => {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('rememberMe');\r\n  };\r\n\r\n  logout = () => {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n  };\r\n\r\n  getConfirm = () => {\r\n    // Using jwt-decode npm package to decode the token\r\n    let answer = decode(this.getToken());\r\n    console.log('Recieved answer!');\r\n    return answer;\r\n  };\r\n\r\n  _checkStatus = (response) => {\r\n    // raises an error in case response status is not a success\r\n    if (response.status == 200) {\r\n      // Success status lies between 200 to 300\r\n      return response;\r\n    } else {\r\n      var error = new Error(response.statusText);\r\n      error.response = response;\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}