{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\rbhate\\\\projects\\\\react-next-serversiderendering\\\\utils\\\\withAuth.js\";\nimport React, { Component } from 'react';\nimport { Router } from 'next/router';\nimport AuthHelperMethods from './AuthHelperMethods';\n/* A higher order component is frequently written as a function that returns a class. */\n\nexport default function withAuth(AuthComponent) {\n  var _temp;\n\n  var Auth = new AuthHelperMethods();\n  return _temp =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(AuthWrapped, _Component);\n\n    function AuthWrapped() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, AuthWrapped);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AuthWrapped)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _defineProperty(_assertThisInitialized(_this), \"state\", {\n        confirm: null,\n        loaded: false\n      });\n\n      return _this;\n    }\n\n    _createClass(AuthWrapped, [{\n      key: \"componentDidMount\",\n\n      /* In the componentDid<ount, we would want to do a couple of important tasks in order to verify the current users authentication status\r\n      prior to granting them enterance into the app. */\n      value: function componentDidMount() {\n        if (!Auth.loggedIn()) {\n          Router.push('/login');\n        } else {\n          /* Try to get confirmation message from the Auth helper. */\n          try {\n            var confirm = Auth.getConfirm();\n            console.log('confirmation is:', confirm);\n            this.setState({\n              confirm: confirm,\n              loaded: true\n            });\n          } catch (err) {\n            /* Oh snap! Looks like there's an error so we'll print it out and log the user out for security reasons. */\n            console.log(err);\n            Auth.logout();\n            this.props.history.replace('/login');\n          }\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (this.state.loaded == true) {\n          if (this.state.confirm) {\n            console.log('confirmed!');\n            return (\n              /* component that is currently being wrapper(App.js) */\n              React.createElement(AuthComponent, {\n                history: this.props.history,\n                confirm: this.state.confirm,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 44\n                },\n                __self: this\n              })\n            );\n          } else {\n            console.log('not confirmed!');\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }]);\n\n    return AuthWrapped;\n  }(Component), _temp;\n}","map":{"version":3,"sources":["C:\\Users\\rbhate\\projects\\react-next-serversiderendering\\utils\\withAuth.js"],"names":["React","Component","Router","AuthHelperMethods","withAuth","AuthComponent","Auth","confirm","loaded","loggedIn","push","getConfirm","console","log","setState","err","logout","props","history","replace","state"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA;;AACA,eAAe,SAASC,QAAT,CAAkBC,aAAlB,EAAiC;AAAA;;AAC9C,MAAMC,IAAI,GAAG,IAAIH,iBAAJ,EAAb;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,8DACU;AACNI,QAAAA,OAAO,EAAE,IADH;AAENC,QAAAA,MAAM,EAAE;AAFF,OADV;;AAAA;AAAA;;AAAA;AAAA;;AAME;;AANF,0CAQsB;AAClB,YAAI,CAACF,IAAI,CAACG,QAAL,EAAL,EAAsB;AACpBP,UAAAA,MAAM,CAACQ,IAAP,CAAY,QAAZ;AACD,SAFD,MAEO;AACL;AACA,cAAI;AACF,gBAAMH,OAAO,GAAGD,IAAI,CAACK,UAAL,EAAhB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCN,OAAhC;AACA,iBAAKO,QAAL,CAAc;AACZP,cAAAA,OAAO,EAAEA,OADG;AAEZC,cAAAA,MAAM,EAAE;AAFI,aAAd;AAID,WAPD,CAOE,OAAOO,GAAP,EAAY;AACZ;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAT,YAAAA,IAAI,CAACU,MAAL;AACA,iBAAKC,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B,QAA3B;AACD;AACF;AACF;AA3BH;AAAA;AAAA,+BA6BW;AACP,YAAI,KAAKC,KAAL,CAAWZ,MAAX,IAAqB,IAAzB,EAA+B;AAC7B,cAAI,KAAKY,KAAL,CAAWb,OAAf,EAAwB;AACtBK,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA;AACE;AACA,kCAAC,aAAD;AACE,gBAAA,OAAO,EAAE,KAAKI,KAAL,CAAWC,OADtB;AAEE,gBAAA,OAAO,EAAE,KAAKE,KAAL,CAAWb,OAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAOD,WATD,MASO;AACLK,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,mBAAO,IAAP;AACD;AACF,SAdD,MAcO;AACL,iBAAO,IAAP;AACD;AACF;AA/CH;;AAAA;AAAA,IAAiCZ,SAAjC;AAiDD","sourcesContent":["import React, { Component } from 'react';\r\nimport { Router } from 'next/router';\r\nimport AuthHelperMethods from './AuthHelperMethods';\r\n\r\n/* A higher order component is frequently written as a function that returns a class. */\r\nexport default function withAuth(AuthComponent) {\r\n  const Auth = new AuthHelperMethods();\r\n\r\n  return class AuthWrapped extends Component {\r\n    state = {\r\n      confirm: null,\r\n      loaded: false,\r\n    };\r\n\r\n    /* In the componentDid<ount, we would want to do a couple of important tasks in order to verify the current users authentication status\r\n    prior to granting them enterance into the app. */\r\n    componentDidMount() {\r\n      if (!Auth.loggedIn()) {\r\n        Router.push('/login');\r\n      } else {\r\n        /* Try to get confirmation message from the Auth helper. */\r\n        try {\r\n          const confirm = Auth.getConfirm();\r\n          console.log('confirmation is:', confirm);\r\n          this.setState({\r\n            confirm: confirm,\r\n            loaded: true,\r\n          });\r\n        } catch (err) {\r\n          /* Oh snap! Looks like there's an error so we'll print it out and log the user out for security reasons. */\r\n          console.log(err);\r\n          Auth.logout();\r\n          this.props.history.replace('/login');\r\n        }\r\n      }\r\n    }\r\n\r\n    render() {\r\n      if (this.state.loaded == true) {\r\n        if (this.state.confirm) {\r\n          console.log('confirmed!');\r\n          return (\r\n            /* component that is currently being wrapper(App.js) */\r\n            <AuthComponent\r\n              history={this.props.history}\r\n              confirm={this.state.confirm}\r\n            />\r\n          );\r\n        } else {\r\n          console.log('not confirmed!');\r\n          return null;\r\n        }\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}