{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\rbhate\\\\projects\\\\react-next-serversiderendering\\\\src\\\\components\\\\List\\\\List.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useInfiniteScroll } from './useInfiniteScroll';\n\nvar List = function List() {\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      start = _useState2[0],\n      setStart = _useState2[1];\n\n  var _useState3 = useState(5),\n      _useState4 = _slicedToArray(_useState3, 2),\n      limit = _useState4[0],\n      setLimit = _useState4[1];\n\n  var _useState5 = useState(_Array$from(Array(30).keys(), function (n) {\n    return n + 1;\n  })),\n      _useState6 = _slicedToArray(_useState5, 2),\n      listItems = _useState6[0],\n      setListItems = _useState6[1];\n\n  var _useInfiniteScroll = useInfiniteScroll(fetchMoreListItems),\n      _useInfiniteScroll2 = _slicedToArray(_useInfiniteScroll, 2),\n      isFetching = _useInfiniteScroll2[0],\n      setIsFetching = _useInfiniteScroll2[1];\n\n  function fetchMoreListItems() {\n    setTimeout(function () {\n      setListItems(function (prevState) {\n        return [].concat(_toConsumableArray(prevState), _toConsumableArray(_Array$from(Array(20).keys(), function (n) {\n          return n + prevState.length + 1;\n        })));\n      });\n      setIsFetching(false);\n    }, 2000);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n    className: \"list-group mb-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, listItems.map(function (listItem, index) {\n    return React.createElement(\"li\", {\n      className: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"List Item \", listItem);\n  })), isFetching && 'Fetching more list items...');\n};\n\nexport default List;","map":{"version":3,"sources":["C:\\Users\\rbhate\\projects\\react-next-serversiderendering\\src\\components\\List\\List.js"],"names":["React","useState","useEffect","useInfiniteScroll","List","start","setStart","limit","setLimit","Array","keys","n","listItems","setListItems","fetchMoreListItems","isFetching","setIsFetching","setTimeout","prevState","length","map","listItem","index"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBACSH,QAAQ,CAAC,CAAD,CADjB;AAAA;AAAA,MACVI,KADU;AAAA,MACHC,QADG;;AAAA,mBAESL,QAAQ,CAAC,CAAD,CAFjB;AAAA;AAAA,MAEVM,KAFU;AAAA,MAEHC,QAFG;;AAAA,mBAGiBP,QAAQ,CACxC,YAAWQ,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,EAAX,EAA6B,UAACC,CAAD;AAAA,WAAOA,CAAC,GAAG,CAAX;AAAA,GAA7B,CADwC,CAHzB;AAAA;AAAA,MAGVC,SAHU;AAAA,MAGCC,YAHD;;AAAA,2BAMmBV,iBAAiB,CAACW,kBAAD,CANpC;AAAA;AAAA,MAMVC,UANU;AAAA,MAMEC,aANF;;AAQjB,WAASF,kBAAT,GAA8B;AAC5BG,IAAAA,UAAU,CAAC,YAAM;AACfJ,MAAAA,YAAY,CAAC,UAACK,SAAD;AAAA,4CACRA,SADQ,sBAER,YAAWT,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,EAAX,EAA6B,UAACC,CAAD;AAAA,iBAAOA,CAAC,GAAGO,SAAS,CAACC,MAAd,GAAuB,CAA9B;AAAA,SAA7B,CAFQ;AAAA,OAAD,CAAZ;AAIAH,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KANS,EAMP,IANO,CAAV;AAOD;;AAED,SACE,0CACE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,SAAS,CAACQ,GAAV,CAAc,UAACC,QAAD,EAAWC,KAAX;AAAA,WACb;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA2CD,QAA3C,CADa;AAAA,GAAd,CADH,CADF,EAMGN,UAAU,IAAI,6BANjB,CADF;AAUD,CA5BD;;AA8BA,eAAeX,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useInfiniteScroll } from './useInfiniteScroll';\r\n\r\nconst List = () => {\r\n  const [start, setStart] = useState(1);\r\n  const [limit, setLimit] = useState(5);\r\n  const [listItems, setListItems] = useState(\r\n    Array.from(Array(30).keys(), (n) => n + 1),\r\n  );\r\n  const [isFetching, setIsFetching] = useInfiniteScroll(fetchMoreListItems);\r\n\r\n  function fetchMoreListItems() {\r\n    setTimeout(() => {\r\n      setListItems((prevState) => [\r\n        ...prevState,\r\n        ...Array.from(Array(20).keys(), (n) => n + prevState.length + 1),\r\n      ]);\r\n      setIsFetching(false);\r\n    }, 2000);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"list-group mb-2\">\r\n        {listItems.map((listItem, index) => (\r\n          <li className=\"list-group-item\">List Item {listItem}</li>\r\n        ))}\r\n      </ul>\r\n      {isFetching && 'Fetching more list items...'}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n"]},"metadata":{},"sourceType":"module"}