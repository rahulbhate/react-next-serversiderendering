{"version":3,"file":"static/webpack/static/development/pages/secret.js.a172f123d44c76c5cab5.hot-update.js","sources":["webpack:///./utils/AuthHelperMethods.js"],"sourcesContent":["import decode from 'jwt-decode';\nimport Router from 'next/router';\n\nexport default class AuthHelperMethods {\n  // Initializing important variables\n  constructor(domain) {\n    //THIS LINE IS ONLY USED WHEN YOU'RE IN PRODUCTION MODE!\n    // this.domain = domain || 'http://localhost:3000'; // API server domain\n  }\n  login = (inputValues) => {\n    const options = {\n      method: 'POST',\n      body: JSON.stringify(inputValues),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch('http://localhost:8000/login', options)\n      .then((res) => {\n        if (res.ok) {\n          return Promise.resolve(res.json());\n        } else {\n          return Promise.reject({\n            status: res.status,\n            statusText: res.statusText,\n          });\n        }\n      })\n      .then((res) => {\n        console.log(res);\n        this.setToken(res.token);\n        Router.push('/sessions');\n      })\n      .catch((err) => console.log('Error, with message:', err.statusText));\n  };\n\n  loggedIn = () => {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // Getting token from localstorage\n    console.log(token);\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  };\n\n  isTokenExpired = (token) => {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        // Checking if token is expired.\n        console.log('isToken Expired function called');\n        return true;\n      } else return false;\n    } catch (err) {\n      console.log('expired check failed! Line 42: AuthService.js');\n      return false;\n    }\n  };\n\n  setToken = (idToken) => {\n    // Saves user token to localStorage\n    localStorage.setItem('rememberMe', idToken);\n  };\n\n  getToken = () => {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('rememberMe');\n  };\n\n  logout = () => {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n  };\n\n  getConfirm = () => {\n    // Using jwt-decode npm package to decode the token\n    let answer = decode(this.getToken());\n    console.log('Recieved answer!');\n    return answer;\n  };\n\n  _checkStatus = (response) => {\n    // raises an error in case response status is not a success\n    if (response.status == 200) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAHA;AACA;AADA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AArCA;AAuCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnDA;AAqDA;AACA;AACA;AACA;AAxDA;AA0DA;AACA;AACA;AACA;AA7DA;AA+DA;AACA;AACA;AACA;AAlEA;AAoEA;AACA;AACA;AACA;AACA;AACA;AAzEA;AA2EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjFA;AACA;;;;;A","sourceRoot":""}