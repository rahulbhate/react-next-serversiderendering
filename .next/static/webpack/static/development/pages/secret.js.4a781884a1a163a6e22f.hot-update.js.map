{"version":3,"file":"static/webpack/static\\development\\pages\\secret.js.4a781884a1a163a6e22f.hot-update.js","sources":["webpack:///./utils/AuthHelperMethods.js"],"sourcesContent":["import decode from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport Router from 'next/router';\r\n\r\nexport default class AuthHelperMethods {\r\n  // Initializing important variables\r\n  constructor(domain) {\r\n    //THIS LINE IS ONLY USED WHEN YOU'RE IN PRODUCTION MODE!\r\n    this.domain = domain || 'http://localhost:3000'; // API server domain\r\n  }\r\n  login = (inputValues) => {\r\n    // Get a token from api server using the fetch api\r\n    axios.post(`http://localhost:8080/login`, inputValues).then((res) => {\r\n      console.log(res.data.token);\r\n      const token = res.data.token;\r\n      localStorage.setItem('rememberMe', token);\r\n      //setToken(token);\r\n      console.log(token);\r\n      Router.push('/secret');\r\n    });\r\n  };\r\n\r\n  loggedIn = () => {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken(); // Getting token from localstorage\r\n    console.log(token);\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  };\r\n\r\n  isTokenExpired = (token) => {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        // Checking if token is expired.\r\n        console.log('isToken Expired function called');\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      console.log('expired check failed! Line 42: AuthService.js');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  setToken = (idToken) => {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('rememberMe', idToken);\r\n  };\r\n\r\n  getToken = () => {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('rememberMe');\r\n  };\r\n\r\n  logout = () => {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n  };\r\n\r\n  getConfirm = () => {\r\n    // Using jwt-decode npm package to decode the token\r\n    let answer = decode(this.getToken());\r\n    console.log('Recieved answer!');\r\n    return answer;\r\n  };\r\n\r\n  fetch = (url, options) => {\r\n    // performs api calls sending the required authentication headers\r\n    const headers = {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    };\r\n    // Setting Authorization header\r\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\r\n    if (this.loggedIn()) {\r\n      headers['Authorization'] = 'Bearer ' + this.getToken();\r\n    }\r\n\r\n    return fetch(url, {\r\n      headers,\r\n      ...options,\r\n    })\r\n      .then(this._checkStatus)\r\n      .then((response) => response.data.json())\r\n      .then(error);\r\n  };\r\n\r\n  _checkStatus = (response) => {\r\n    // raises an error in case response status is not a success\r\n    if (response.status == 200) {\r\n      // Success status lies between 200 to 300\r\n      return response;\r\n    } else {\r\n      var error = new Error(response.statusText);\r\n      error.response = response;\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAsCA;AACA;AACA;AACA;AAzCA;AA2CA;AACA;AACA;AACA;AA9CA;AAgDA;AACA;AACA;AACA;AAnDA;AAqDA;AACA;AACA;AACA;AACA;AACA;AA1DA;AA4DA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAKA;AAAA;AAEA;AACA;AA/EA;AAiFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1FA;AACA;AACA;AACA;;;;;A","sourceRoot":""}