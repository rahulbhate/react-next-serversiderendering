{"version":3,"file":"static/webpack/static\\development\\pages\\secret.js.1de4c3697a29b8370ba8.hot-update.js","sources":["webpack:///./pages/secret.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Cookies } from 'react-cookie';\r\nimport Auth from '../utils/auth';\r\nimport { Router } from 'next/router';\r\nimport { longStackSupport } from 'q';\r\n\r\nconst serverUrl = 'http://localhost:8080';\r\n\r\n// set up cookies\r\n//const cookies = new Cookies();\r\nfunction Secret() {\r\n  const [isAuthenticated, setAuthenticated] = useState();\r\n  const [clientToken, setToken] = useState();\r\n  useEffect(() => {\r\n    //const token = cookies.get('token');\r\n    const token = localStorage.getItem('rememberMe');\r\n    //console.log(token)\r\n    if (token) {\r\n      setAuthenticated(true);\r\n      setToken(token);\r\n      console.log(clientToken);\r\n    } else {\r\n      setAuthenticated(false);\r\n      //Router.push('/login');\r\n    }\r\n    console.log('useEffect hook called');\r\n  });\r\n  const logout = async () => {\r\n    //const token = cookies.get('token');\r\n    //console.log(token);\r\n\r\n    await axios\r\n      .post(serverUrl + '/logout', {})\r\n      .then((res) => {\r\n        console.log(res);\r\n        //cookies.remove(token);\r\n        setToken('');\r\n        localStorage.removeItem('rememberMe');\r\n        console.log('token has been removed');\r\n      })\r\n      .then((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  return isAuthenticated ? (\r\n    <div>\r\n      {' '}\r\n      <h3>This is secret page</h3>\r\n      <button onClick={logout}>Logout</button>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <h3>You are not authorized user</h3>\r\n    </div>\r\n  );\r\n}\r\nexport default Auth(Secret);\r\n/*class Secret extends React.Component {\r\n  onPingCall = async (e) => {\r\n    const token = cookies.get('token');\r\n    console.log(token);\r\n\r\n    await axios\r\n      .post(serverUrl + '/logout', {})\r\n      .then((res) => {\r\n        console.log(res);\r\n        cookies.remove(token);\r\n        console.log('token has been removed');\r\n        Router.push('/login');\r\n      })\r\n      .then((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Secret page</h2>\r\n        <p>Only accessible via a valid JWT</p>\r\n        <br />\r\n        <button onClick={(e) => this.onPingCall(e)}>Logout</button>\r\n        <p>Check console for response</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Server-Side Rendering\r\nSecret.getInitialProps = async (ctx) => {\r\n  // Must validate JWT\r\n  // If the JWT is invalid it must redirect\r\n  // back to the main page. You can do that\r\n  // with Router from 'next/router\r\n  await Auth(ctx);\r\n\r\n  // Must return an object\r\n  return {};\r\n};\r\n\r\nexport default Auth(Secret);*/\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}